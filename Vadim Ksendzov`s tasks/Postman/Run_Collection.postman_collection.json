{
	"info": {
		"_postman_id": "291ac9c4-5509-4f33-b780-0544c0c524cd",
		"name": "Run_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19359539"
	},
	"item": [
		{
			"name": "Task_1 (Body has string in the response)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"   pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}first",
					"host": [
						"{{host}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "TASK_2 (JSON_parsing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//parsing response\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//checking age,name,salary in body\r",
							"pm.test(\"Check_age_name_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"age\", \"name\", \"salary\");\r",
							"});\r",
							"pm.test(\"Age is correct\", function () {\r",
							"    res_age = pm.expect(jsonData.age).to.eql(\"29\");\r",
							"});\r",
							"pm.test(\"Name is correct\", function () {\r",
							"    res_name = pm.expect(jsonData.name).to.eql(\"Andrew\");\r",
							"});\r",
							"pm.test(\"Salary is correct\", function () {\r",
							"    res_salary = pm.expect(jsonData.salary).to.eql(1200);\r",
							"});\r",
							"\r",
							"//parsing request\r",
							"let requestData = request.data\r",
							"console.log(requestData)\r",
							"\r",
							"//cheking requestData\r",
							"req_age = requestData.age\r",
							"req_name = requestData.name\r",
							"req_salary = requestData.salary\r",
							"console.log(\"Age -\",req_age)\r",
							"console.log(\"Name -\",req_name)\r",
							"console.log(\"Salary -\",req_salary)\r",
							"\r",
							"//checking response value equal request value\r",
							"console.log(res_age = req_age)\r",
							"console.log(res_name = req_name)\r",
							"console.log(res_salary = req_salary)\r",
							"\r",
							"//family in response\r",
							"family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"//cheking salary\r",
							"req_salary = jsonData.family.u_salary_1_5_year\r",
							"u_salary = res_salary*4\r",
							"console.log(\"Response salary = \"+u_salary+\", which must be equal Request salary*4 = \"+req_salary)\r",
							"\r",
							"//second cheking salary \r",
							"pm.test(\"salary_two\", function () {\r",
							"   pm.expect(req_salary).to.eql(u_salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}user_info_3",
					"host": [
						"{{host}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "TASK_3 (User_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//parsing respons body to JSON\r",
							"let JsonData = pm.response.json()\r",
							"let res_name = JsonData.name\r",
							"let res_age = JsonData.age\r",
							"let res_salary = JsonData.salary\r",
							"\r",
							"//parsing request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"//comparing names\r",
							"pm.test(\"Response name equal Request name\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//comparing ages\r",
							"pm.test(\"Response age equal Request age\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//checking salary\r",
							"pm.test(\"Response salary equal Request salary\", function () {\r",
							"    pm.expect(res_salary).to.eql.toString(req_salary);\r",
							"});\r",
							"\r",
							"//checkin Family from response\r",
							"let res_family = JsonData.family\r",
							"console.log(res_family)\r",
							"\r",
							"//checking dog_param has name_param\r",
							"pm.test(\"Dog_param has NAME_param\", function () {\r",
							"    res_dog = res_family.pets.dog\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include('name');\r",
							"});\r",
							"\r",
							"//checking dog has age_param\r",
							"pm.test(\"Dog_param has AGE_param\", function () {\r",
							"    res_dog = res_family.pets.dog\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include('age');\r",
							"});\r",
							"\r",
							"////checking dog has name Luky\r",
							"pm.test(\"Dog_param has name Luky\", function () {\r",
							"    res_dog = res_family.pets.dog.name\r",
							"    pm.expect(res_dog).to.eql('Luky');\r",
							"});\r",
							"////checking dog has age 4\r",
							"pm.test(\"Dog_param has age 4\", function () {\r",
							"    res_dog = res_family.pets.dog.age\r",
							"    pm.expect(JSON.stringify(res_dog)).to.eql('4');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}object_info_3?name=Fedor&age=28&salary=1300",
					"host": [
						"{{host}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Fedor"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4 plus cycle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"//parsing respons body to JSON\r",
							"let JsonData = pm.response.json()\r",
							"let res_name = JsonData.name\r",
							"let res_age = JsonData.age\r",
							"let res_salary = JsonData.salary\r",
							"\r",
							"//parsing request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"//comparing names\r",
							"pm.test(\"Response name equal Request name\", function () {\r",
							"    pm.expect(String(res_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//comparing ages\r",
							"pm.test(\"Response age equal Request age\", function () {\r",
							"    pm.expect(String(res_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//request and response salarys in console\r",
							"console.log('Request salary - ',req_salary)\r",
							"\r",
							"//response salary items\r",
							"console.log('Response salary - ',res_salary[0])\r",
							"console.log('Response salary - ',res_salary[1])\r",
							"console.log('Response salary - ',res_salary[2])\r",
							"\r",
							"//comparing salarys\r",
							"pm.test(\"Response item 0 salary equal Request salary\", function () {\r",
							"    pm.expect(String(res_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//comparing the first item salary\r",
							"pm.test(\"Response item 1 salary equal Request salary*2\", function () {\r",
							"    pm.expect(res_salary[1]).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"//comparing the second item salary\r",
							"pm.test(\"Response item 1 salary equal Request salary*3\", function () {\r",
							"    pm.expect(res_salary[2]).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"//create a variable name,age,salary\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age);\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//cycle of salarys\r",
							"for (let i=0; i<3;i++){\r",
							"    console.log(JsonData.salary[i])\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}object_info_4?name=Ivan&age=27&salary=1500",
					"host": [
						"{{host}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5 plus cycle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//parsing respons body to JSON\r",
							"let JsonData = pm.response.json();\r",
							"let qa_salary = JsonData.start_qa_salary\r",
							"let qa_salary_after_6_months = JsonData.qa_salary_after_6_months\r",
							"let qa_salary_after_12_months = JsonData.qa_salary_after_12_months\r",
							"let qa_salary_after_18_months = JsonData['qa_salary_after_1.5_year'] \r",
							"let qa_salary_after_42_months = JsonData['qa_salary_after_3.5_years']\r",
							"qa_salary_after_60_months = JsonData.person.u_salary_5_years\r",
							"\r",
							"//values into console\r",
							"console.log(qa_salary)\r",
							"console.log(qa_salary_after_6_months)\r",
							"console.log(qa_salary_after_12_months)\r",
							"console.log(qa_salary_after_18_months)\r",
							"console.log(qa_salary_after_42_months)\r",
							"\r",
							"//parsing request\r",
							"let requestData = request.data\r",
							"let req_salary = requestData.salary\r",
							"let req_age = requestData.age\r",
							"\r",
							"\r",
							"//response json has start qa salary\r",
							"pm.test(\"Checking start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('start_qa_salary');\r",
							"});\r",
							"\r",
							"//response json has qa_salary_after_6_months\r",
							"pm.test(\"Checking qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//response json has qa_salary_after_12_months\r",
							"pm.test(\"Checking qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//response json has qa_salary_after_18_months\r",
							"pm.test(\"Checking qa_salary_after_18_months\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//response json has qa_salary_after_42_months\r",
							"pm.test(\"Checking qa_salary_after_42_months\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//json has person\r",
							"pm.test(\"json has perso\", function () {\r",
							"    pm.expect(JSON.stringify(JsonData)).to.include('person');\r",
							"});\r",
							"\r",
							"//comparing start qa salary\r",
							"pm.test(\"comparing qa salary\", function () {\r",
							"    pm.expect(String(qa_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//comparing qa_salary_after_6_months equal salary*2\r",
							"pm.test(\"qa_salary_after_6_months equal salary*2\", function () {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//comparing qa_salary_after_12_months equal salary*2\r",
							"pm.test(\"qa_salary_after_12_months equal salary*2.7\", function () {\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"//comparing qa_salary_after_18_months equal salary*3.3\r",
							"pm.test(\"qa_salary_after_18_months equal salary*3.3\", function () {\r",
							"    pm.expect(qa_salary_after_18_months).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"//comparing qa_salary_after_42_months equal salary*3.8\r",
							"pm.test(\"qa_salary_after_42_months equal salary*3.8\", function () {\r",
							"    pm.expect(qa_salary_after_42_months).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"//comparing u_name[1] equal response salary \r",
							"pm.test(\"u_name[1] equal response salary\", function () {\r",
							"    pm.expect(String(JsonData.person.u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//comparing u_age equal request age\r",
							"pm.test(\"u_age equal request age\", function () {\r",
							"    pm.expect(String(JsonData.person.u_age)).to.eql(req_age)\r",
							"});\r",
							"\r",
							"//comparing qa_salary_after_60_months equal salary*4.2\r",
							"pm.test(\"qa_salary_after_60_months equal salary*4.2\", function () {\r",
							"    pm.expect(qa_salary_after_60_months).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"//cycle of person\r",
							"for (let i=0;i<3;i++){\r",
							"    if (i==0){\r",
							"        console.log(JsonData.person.u_age)\r",
							"    }else if (i==1){\r",
							"        console.log(JsonData.person.u_name)\r",
							"    }else console.log(JsonData.person.u_salary_5_years)\r",
							"    }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name1}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}user_info_2?=&=&=",
					"host": [
						"{{host}}user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://162.55.220.72:5005/",
			"type": "string"
		}
	]
}